

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Fri Apr 26 19:30:08 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F84A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x4E,2
    25     0000                     
    26                           ; Generated 12/10/2023 GMT
    27                           ; 
    28                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F84A Definitions
    58                           ; 
    59                           ; SFR Addresses
    60     0000                     	;# 
    61     0001                     	;# 
    62     0002                     	;# 
    63     0003                     	;# 
    64     0004                     	;# 
    65     0005                     	;# 
    66     0006                     	;# 
    67     0008                     	;# 
    68     0009                     	;# 
    69     000A                     	;# 
    70     000B                     	;# 
    71     0081                     	;# 
    72     0085                     	;# 
    73     0086                     	;# 
    74     0088                     	;# 
    75     0089                     	;# 
    76     0000                     	;# 
    77     0001                     	;# 
    78     0002                     	;# 
    79     0003                     	;# 
    80     0004                     	;# 
    81     0005                     	;# 
    82     0006                     	;# 
    83     0008                     	;# 
    84     0009                     	;# 
    85     000A                     	;# 
    86     000B                     	;# 
    87     0081                     	;# 
    88     0085                     	;# 
    89     0086                     	;# 
    90     0088                     	;# 
    91     0089                     	;# 
    92                           
    93                           	psect	strings
    94     0001                     __pstrings:
    95     0001                     stringtab:
    96     0001                     __stringtab:
    97     0001                     stringcode:	
    98                           ;	String table - string pointers are 1 byte each
    99                           
   100     0001                     stringdir:
   101     0001  3000               	movlw	high stringdir
   102     0002  008A               	movwf	10
   103     0003  0804               	movf	4,w
   104     0004  0A84               	incf	4,f
   105     0005  0782               	addwf	2,f
   106     0006                     __stringbase:
   107     0006  3400               	retlw	0
   108     0007                     __end_of__stringtab:
   109     0007                     _teclas:
   110     0007  3437               	retlw	55
   111     0008  3438               	retlw	56
   112     0009  3439               	retlw	57
   113     000A  342F               	retlw	47
   114     000B  3434               	retlw	52
   115     000C  3435               	retlw	53
   116     000D  3436               	retlw	54
   117     000E  3458               	retlw	88
   118     000F  3431               	retlw	49
   119     0010  3432               	retlw	50
   120     0011  3433               	retlw	51
   121     0012  342D               	retlw	45
   122     0013  3443               	retlw	67
   123     0014  3430               	retlw	48
   124     0015  343D               	retlw	61
   125     0016  342B               	retlw	43
   126     0017                     __end_of_teclas:
   127     0005                     _PORTAbits	set	5
   128     0006                     _PORTB	set	6
   129     002A                     _RA2	set	42
   130     0029                     _RA1	set	41
   131     0028                     _RA0	set	40
   132     0085                     _TRISAbits	set	133
   133     0086                     _TRISB	set	134
   134     0085                     _TRISA	set	133
   135                           
   136                           	psect	cinit
   137     03F9                     start_initialization:	
   138                           ; #config settings
   139                           
   140     03F9                     __initialization:
   141                           
   142                           ; Clear objects allocated to BANK0
   143     03F9  1383               	bcf	3,7	;select IRP bank0
   144     03FA  3034               	movlw	low __pbssBANK0
   145     03FB  0084               	movwf	4
   146     03FC  304C               	movlw	low (__pbssBANK0+24)
   147     03FD  20E3               	fcall	clear_ram0
   148     03FE                     end_of_initialization:	
   149                           ;End of C runtime variable initialization code
   150                           
   151     03FE                     __end_of__initialization:
   152     03FE  0183               	clrf	3
   153     03FF  2AA3               	ljmp	_main	;jump to C main() function
   154                           
   155                           	psect	bssBANK0
   156     0034                     __pbssBANK0:
   157     0034                     main@F719:
   158     0034                     	ds	17
   159     0045                     _asciiDigits:
   160     0045                     	ds	1
   161     0046                     _asciiMode:
   162     0046                     	ds	1
   163     0047                     _cursorPosition:
   164     0047                     	ds	1
   165     0048                     _asciiValue:
   166     0048                     	ds	4
   167                           
   168                           	psect	clrtext
   169     00E3                     clear_ram0:	
   170                           ;	Called with FSR containing the base address, and
   171                           ;	W with the last address+1
   172                           
   173     00E3  0064               	clrwdt	;clear the watchdog before getting into this loop
   174     00E4                     clrloop0:
   175     00E4  0180               	clrf	0	;clear RAM location pointed to by FSR
   176     00E5  0A84               	incf	4,f	;increment pointer
   177     00E6  0604               	xorwf	4,w	;XOR with final address
   178     00E7  1903               	btfsc	3,2	;have we reached the end yet?
   179     00E8  3400               	retlw	0	;all done for this memory range, return
   180     00E9  0604               	xorwf	4,w	;XOR again to restore value
   181     00EA  28E4               	goto	clrloop0	;do the next byte
   182                           
   183                           	psect	cstackCOMMON
   184     0000                     __pcstackCOMMON:
   185     0000                     ??_Keyboard_init:
   186     0000                     ??_Prepare_Keypad_Pins:	
   187                           ; 1 bytes @ 0x0
   188                           
   189     0000                     ??_Prepare_LCD_Pins:	
   190                           ; 1 bytes @ 0x0
   191                           
   192     0000                     ??_LCD_setCursor:	
   193                           ; 1 bytes @ 0x0
   194                           
   195     0000                     ??_LCD_print:	
   196                           ; 1 bytes @ 0x0
   197                           
   198     0000                     ??___wmul:	
   199                           ; 1 bytes @ 0x0
   200                           
   201                           
   202                           	psect	cstackBANK0
   203     000C                     __pcstackBANK0:	
   204                           ; 1 bytes @ 0x0
   205                           
   206     000C                     ?_LCD_init:
   207     000C                     ?_Keyboard_init:	
   208                           ; 1 bytes @ 0x0
   209                           
   210     000C                     ?_Prepare_Keypad_Pins:	
   211                           ; 1 bytes @ 0x0
   212                           
   213     000C                     ?_Read_Keypad:	
   214                           ; 1 bytes @ 0x0
   215                           
   216     000C                     ??_Read_Keypad:	
   217                           ; 1 bytes @ 0x0
   218                           
   219     000C                     ?_Prepare_LCD_Pins:	
   220                           ; 1 bytes @ 0x0
   221                           
   222     000C                     ?_LCD_clear:	
   223                           ; 1 bytes @ 0x0
   224                           
   225     000C                     ?_LCD_print:	
   226                           ; 1 bytes @ 0x0
   227                           
   228     000C                     ?_main:	
   229                           ; 1 bytes @ 0x0
   230                           
   231     000C                     ?_LCD_command:	
   232                           ; 1 bytes @ 0x0
   233                           
   234     000C                     ??_LCD_command:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     000C                     ?_LCD_data:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     000C                     ??_LCD_data:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     000C                     ?___wmul:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     000C                     ___wmul@multiplier:	
   247                           ; 2 bytes @ 0x0
   248                           
   249                           
   250                           ; 2 bytes @ 0x0
   251     000C                     	ds	2
   252     000E                     LCD_command@command:
   253     000E                     LCD_data@data:	
   254                           ; 1 bytes @ 0x2
   255                           
   256     000E                     Read_Keypad@row:	
   257                           ; 1 bytes @ 0x2
   258                           
   259     000E                     ___wmul@multiplicand:	
   260                           ; 2 bytes @ 0x2
   261                           
   262                           
   263                           ; 2 bytes @ 0x2
   264     000E                     	ds	1
   265     000F                     ??_LCD_init:
   266     000F                     ??_LCD_clear:	
   267                           ; 1 bytes @ 0x3
   268                           
   269     000F                     ?_LCD_setCursor:	
   270                           ; 1 bytes @ 0x3
   271                           
   272     000F                     LCD_setCursor@column:	
   273                           ; 1 bytes @ 0x3
   274                           
   275     000F                     LCD_print@string:	
   276                           ; 1 bytes @ 0x3
   277                           
   278                           
   279                           ; 1 bytes @ 0x3
   280     000F                     	ds	1
   281     0010                     LCD_setCursor@row:
   282     0010                     Read_Keypad@col:	
   283                           ; 1 bytes @ 0x4
   284                           
   285     0010                     ___wmul@product:	
   286                           ; 2 bytes @ 0x4
   287                           
   288                           
   289                           ; 2 bytes @ 0x4
   290     0010                     	ds	1
   291     0011                     _LCD_setCursor$134:
   292                           
   293                           ; 2 bytes @ 0x5
   294     0011                     	ds	1
   295     0012                     ?_atoi:
   296                           
   297                           ; 2 bytes @ 0x6
   298     0012                     	ds	1
   299     0013                     LCD_setCursor@position:
   300                           
   301                           ; 1 bytes @ 0x7
   302     0013                     	ds	1
   303     0014                     ??_atoi:
   304                           
   305                           ; 1 bytes @ 0x8
   306     0014                     	ds	2
   307     0016                     atoi@neg:
   308                           
   309                           ; 1 bytes @ 0xA
   310     0016                     	ds	1
   311     0017                     atoi@n:
   312                           
   313                           ; 2 bytes @ 0xB
   314     0017                     	ds	2
   315     0019                     atoi@s:
   316                           
   317                           ; 1 bytes @ 0xD
   318     0019                     	ds	1
   319     001A                     ??_main:
   320                           
   321                           ; 1 bytes @ 0xE
   322     001A                     	ds	2
   323     001C                     main@displayString:
   324                           
   325                           ; 17 bytes @ 0x10
   326     001C                     	ds	17
   327     002D                     main@asciiCode:
   328                           
   329                           ; 2 bytes @ 0x21
   330     002D                     	ds	2
   331     002F                     main@i:
   332                           
   333                           ; 1 bytes @ 0x23
   334     002F                     	ds	1
   335     0030                     main@i_121:
   336                           
   337                           ; 1 bytes @ 0x24
   338     0030                     	ds	1
   339     0031                     main@i_122:
   340                           
   341                           ; 1 bytes @ 0x25
   342     0031                     	ds	1
   343     0032                     main@key:
   344                           
   345                           ; 1 bytes @ 0x26
   346     0032                     	ds	1
   347     0033                     main@charCount:
   348                           
   349                           ; 1 bytes @ 0x27
   350     0033                     	ds	1
   351                           
   352                           	psect	maintext
   353     02A3                     __pmaintext:	
   354 ;;
   355 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   356 ;;
   357 ;; *************** function _main *****************
   358 ;; Defined at:
   359 ;;		line 70 in file "practica_1_PIC16F84A.c"
   360 ;; Parameters:    Size  Location     Type
   361 ;;		None
   362 ;; Auto vars:     Size  Location     Type
   363 ;;  i               1   35[BANK0 ] unsigned char 
   364 ;;  i               1   37[BANK0 ] unsigned char 
   365 ;;  i               1   36[BANK0 ] unsigned char 
   366 ;;  asciiCode       2   33[BANK0 ] int 
   367 ;;  key             1   38[BANK0 ] unsigned char 
   368 ;;  displayStrin   17   16[BANK0 ] unsigned char [17]
   369 ;;  charCount       1   39[BANK0 ] unsigned char 
   370 ;; Return value:  Size  Location     Type
   371 ;;                  1    wreg      void 
   372 ;; Registers used:
   373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   374 ;; Tracked objects:
   375 ;;		On entry : B00/0
   376 ;;		On exit  : 0/0
   377 ;;		Unchanged: 0/0
   378 ;; Data sizes:     COMMON   BANK0
   379 ;;      Params:         0       0
   380 ;;      Locals:         0      24
   381 ;;      Temps:          0       2
   382 ;;      Totals:         0      26
   383 ;;Total ram usage:       26 bytes
   384 ;; Hardware stack levels required when called: 2
   385 ;; This function calls:
   386 ;;		_Keyboard_init
   387 ;;		_LCD_clear
   388 ;;		_LCD_init
   389 ;;		_LCD_print
   390 ;;		_LCD_setCursor
   391 ;;		_Prepare_Keypad_Pins
   392 ;;		_Prepare_LCD_Pins
   393 ;;		_Read_Keypad
   394 ;;		_atoi
   395 ;; This function is called by:
   396 ;;		Startup code after reset
   397 ;; This function uses a non-reentrant model
   398 ;;
   399                           
   400     02A3                     _main:	
   401                           ;psect for function _main
   402                           
   403     02A3                     l1135:	
   404                           ;incstack = 0
   405                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   406                           
   407                           
   408                           ;practica_1_PIC16F84A.c: 71:     LCD_init();
   409     02A3  217B               	fcall	_LCD_init
   410                           
   411                           ;practica_1_PIC16F84A.c: 72:     Keyboard_init();
   412     02A4  20EB               	fcall	_Keyboard_init
   413     02A5                     l1137:
   414                           
   415                           ;practica_1_PIC16F84A.c: 73:     char displayString[15 + 2] = "";
   416     02A5  301C               	movlw	main@displayString& (0+255)
   417     02A6  0084               	movwf	4
   418     02A7  3011               	movlw	17
   419     02A8  00CF               	movwf	btemp+1
   420     02A9                     u690:
   421     02A9  1383               	bcf	3,7	;select IRP bank0
   422     02AA  0180               	clrf	0
   423     02AB  0A84               	incf	4,f
   424     02AC  0BCF               	decfsz	btemp+1,f
   425     02AD  2AA9               	goto	u690
   426     02AE                     l1139:
   427                           
   428                           ;practica_1_PIC16F84A.c: 74:     unsigned char charCount = 0;
   429     02AE  1283               	bcf	3,5	;RP0=0, select bank0
   430     02AF  01B3               	clrf	main@charCount
   431     02B0                     l1141:
   432                           
   433                           ;practica_1_PIC16F84A.c: 77:         Prepare_Keypad_Pins();
   434     02B0  20DC               	fcall	_Prepare_Keypad_Pins
   435     02B1                     l1143:
   436                           
   437                           ;practica_1_PIC16F84A.c: 78:         char key = Read_Keypad();
   438     02B1  2216               	fcall	_Read_Keypad
   439     02B2  1283               	bcf	3,5	;RP0=0, select bank0
   440     02B3  00B2               	movwf	main@key
   441     02B4                     l1145:
   442                           
   443                           ;practica_1_PIC16F84A.c: 80:         if (asciiMode) {
   444     02B4  0846               	movf	_asciiMode,w
   445     02B5  1903               	btfsc	3,2
   446     02B6  2AB8               	goto	u701
   447     02B7  2AB9               	goto	u700
   448     02B8                     u701:
   449     02B8  2B3F               	goto	l1193
   450     02B9                     u700:
   451     02B9                     l1147:
   452                           
   453                           ;practica_1_PIC16F84A.c: 81:             if (key == '=') {
   454     02B9  303D               	movlw	61
   455     02BA  0632               	xorwf	main@key,w
   456     02BB  1D03               	btfss	3,2
   457     02BC  2ABE               	goto	u711
   458     02BD  2ABF               	goto	u710
   459     02BE                     u711:
   460     02BE  2B1E               	goto	l1181
   461     02BF                     u710:
   462     02BF                     l1149:
   463                           
   464                           ;practica_1_PIC16F84A.c: 83:                 int asciiCode = atoi(asciiValue);
   465     02BF  3048               	movlw	(low (_asciiValue| 0))& (0+255)
   466     02C0  21A2               	fcall	_atoi
   467     02C1  1283               	bcf	3,5	;RP0=0, select bank0
   468     02C2  0813               	movf	?_atoi+1,w
   469     02C3  00AE               	movwf	main@asciiCode+1
   470     02C4  0812               	movf	?_atoi,w
   471     02C5  00AD               	movwf	main@asciiCode
   472     02C6                     l1151:
   473                           
   474                           ;practica_1_PIC16F84A.c: 84:                 if (asciiCode >= 33 && asciiCode <= 254) {
   475     02C6  082E               	movf	main@asciiCode+1,w
   476     02C7  3A80               	xorlw	128
   477     02C8  00CF               	movwf	btemp+1
   478     02C9  3080               	movlw	128
   479     02CA  024F               	subwf	btemp+1,w
   480     02CB  1D03               	skipz
   481     02CC  2ACF               	goto	u725
   482     02CD  3021               	movlw	33
   483     02CE  022D               	subwf	main@asciiCode,w
   484     02CF                     u725:
   485     02CF  1C03               	skipc
   486     02D0  2AD2               	goto	u721
   487     02D1  2AD3               	goto	u720
   488     02D2                     u721:
   489     02D2  2B19               	goto	l1175
   490     02D3                     u720:
   491     02D3                     l1153:
   492     02D3  1283               	bcf	3,5	;RP0=0, select bank0
   493     02D4  082E               	movf	main@asciiCode+1,w
   494     02D5  3A80               	xorlw	128
   495     02D6  00CF               	movwf	btemp+1
   496     02D7  3080               	movlw	128
   497     02D8  024F               	subwf	btemp+1,w
   498     02D9  1D03               	skipz
   499     02DA  2ADD               	goto	u735
   500     02DB  30FF               	movlw	255
   501     02DC  022D               	subwf	main@asciiCode,w
   502     02DD                     u735:
   503     02DD  1803               	skipnc
   504     02DE  2AE0               	goto	u731
   505     02DF  2AE1               	goto	u730
   506     02E0                     u731:
   507     02E0  2B19               	goto	l1175
   508     02E1                     u730:
   509     02E1                     l1155:
   510                           
   511                           ;practica_1_PIC16F84A.c: 85:                     if (charCount < 15) {
   512     02E1  300F               	movlw	15
   513     02E2  1283               	bcf	3,5	;RP0=0, select bank0
   514     02E3  0233               	subwf	main@charCount,w
   515     02E4  1803               	skipnc
   516     02E5  2AE7               	goto	u741
   517     02E6  2AE8               	goto	u740
   518     02E7                     u741:
   519     02E7  2B19               	goto	l1175
   520     02E8                     u740:
   521     02E8                     l1157:
   522                           
   523                           ;practica_1_PIC16F84A.c: 86:                         for (unsigned char i = charCount; i
      +                           > cursorPosition; i--) {
   524     02E8  0833               	movf	main@charCount,w
   525     02E9  00AF               	movwf	main@i
   526     02EA  2AF9               	goto	l1163
   527     02EB                     l1159:
   528                           
   529                           ;practica_1_PIC16F84A.c: 87:                             displayString[i] = displayStrin
      +                          g[i - 1];
   530     02EB  082F               	movf	main@i,w
   531     02EC  3EFF               	addlw	255
   532     02ED  3E1C               	addlw	(low (main@displayString| 0))& (0+255)
   533     02EE  0084               	movwf	4
   534     02EF  1383               	bcf	3,7	;select IRP bank0
   535     02F0  0800               	movf	0,w
   536     02F1  00CF               	movwf	btemp+1
   537     02F2  082F               	movf	main@i,w
   538     02F3  3E1C               	addlw	(low (main@displayString| 0))& (0+255)
   539     02F4  0084               	movwf	4
   540     02F5  084F               	movf	btemp+1,w
   541     02F6  0080               	movwf	0
   542     02F7                     l1161:
   543                           
   544                           ;practica_1_PIC16F84A.c: 88:                         }
   545     02F7  3001               	movlw	1
   546     02F8  02AF               	subwf	main@i,f
   547     02F9                     l1163:
   548     02F9  082F               	movf	main@i,w
   549     02FA  0247               	subwf	_cursorPosition,w
   550     02FB  1C03               	skipc
   551     02FC  2AFE               	goto	u751
   552     02FD  2AFF               	goto	u750
   553     02FE                     u751:
   554     02FE  2AEB               	goto	l1159
   555     02FF                     u750:
   556     02FF                     l1165:
   557                           
   558                           ;practica_1_PIC16F84A.c: 89:                         displayString[cursorPosition] = (ch
      +                          ar)asciiCode;
   559     02FF  0847               	movf	_cursorPosition,w
   560     0300  3E1C               	addlw	(low (main@displayString| 0))& (0+255)
   561     0301  0084               	movwf	4
   562     0302  082D               	movf	main@asciiCode,w
   563     0303  1383               	bcf	3,7	;select IRP bank0
   564     0304  0080               	movwf	0
   565     0305                     l1167:
   566                           
   567                           ;practica_1_PIC16F84A.c: 90:                         if (cursorPosition < 15) cursorPosi
      +                          tion++;
   568     0305  300F               	movlw	15
   569     0306  0247               	subwf	_cursorPosition,w
   570     0307  1803               	skipnc
   571     0308  2B0A               	goto	u761
   572     0309  2B0B               	goto	u760
   573     030A                     u761:
   574     030A  2B0F               	goto	l1171
   575     030B                     u760:
   576     030B                     l1169:
   577     030B  3001               	movlw	1
   578     030C  00CF               	movwf	btemp+1
   579     030D  084F               	movf	btemp+1,w
   580     030E  07C7               	addwf	_cursorPosition,f
   581     030F                     l1171:
   582                           
   583                           ;practica_1_PIC16F84A.c: 91:                         if (charCount < 15) charCount++;
   584     030F  300F               	movlw	15
   585     0310  0233               	subwf	main@charCount,w
   586     0311  1803               	skipnc
   587     0312  2B14               	goto	u771
   588     0313  2B15               	goto	u770
   589     0314                     u771:
   590     0314  2B19               	goto	l1175
   591     0315                     u770:
   592     0315                     l1173:
   593     0315  3001               	movlw	1
   594     0316  00CF               	movwf	btemp+1
   595     0317  084F               	movf	btemp+1,w
   596     0318  07B3               	addwf	main@charCount,f
   597     0319                     l1175:
   598                           
   599                           ;practica_1_PIC16F84A.c: 94:                 asciiMode = 0;
   600     0319  1283               	bcf	3,5	;RP0=0, select bank0
   601     031A  01C6               	clrf	_asciiMode
   602     031B                     l1177:
   603                           
   604                           ;practica_1_PIC16F84A.c: 95:                 asciiDigits = 0;
   605     031B  01C5               	clrf	_asciiDigits
   606     031C                     l1179:
   607                           
   608                           ;practica_1_PIC16F84A.c: 96:                 asciiValue[0] = '\0';
   609     031C  01C8               	clrf	_asciiValue
   610                           
   611                           ;practica_1_PIC16F84A.c: 97:             } else if (key >= '0' && key <= '9' && asciiDig
      +                          its < 3) {
   612     031D  2BE0               	goto	l1255
   613     031E                     l1181:
   614     031E  3030               	movlw	48
   615     031F  0232               	subwf	main@key,w
   616     0320  1C03               	skipc
   617     0321  2B23               	goto	u781
   618     0322  2B24               	goto	u780
   619     0323                     u781:
   620     0323  2BE0               	goto	l1255
   621     0324                     u780:
   622     0324                     l1183:
   623     0324  303A               	movlw	58
   624     0325  0232               	subwf	main@key,w
   625     0326  1803               	skipnc
   626     0327  2B29               	goto	u791
   627     0328  2B2A               	goto	u790
   628     0329                     u791:
   629     0329  2BE0               	goto	l1255
   630     032A                     u790:
   631     032A                     l1185:
   632     032A  3003               	movlw	3
   633     032B  0245               	subwf	_asciiDigits,w
   634     032C  1803               	skipnc
   635     032D  2B2F               	goto	u801
   636     032E  2B30               	goto	u800
   637     032F                     u801:
   638     032F  2BE0               	goto	l1255
   639     0330                     u800:
   640     0330                     l1187:
   641                           
   642                           ;practica_1_PIC16F84A.c: 99:                 asciiValue[asciiDigits++] = key;
   643     0330  0845               	movf	_asciiDigits,w
   644     0331  3E48               	addlw	(low (_asciiValue| 0))& (0+255)
   645     0332  0084               	movwf	4
   646     0333  0832               	movf	main@key,w
   647     0334  1383               	bcf	3,7	;select IRP bank0
   648     0335  0080               	movwf	0
   649     0336                     l1189:
   650     0336  3001               	movlw	1
   651     0337  00CF               	movwf	btemp+1
   652     0338  084F               	movf	btemp+1,w
   653     0339  07C5               	addwf	_asciiDigits,f
   654     033A                     l1191:
   655                           
   656                           ;practica_1_PIC16F84A.c: 100:                 asciiValue[asciiDigits] = '\0';
   657     033A  0845               	movf	_asciiDigits,w
   658     033B  3E48               	addlw	(low (_asciiValue| 0))& (0+255)
   659     033C  0084               	movwf	4
   660     033D  0180               	clrf	0
   661     033E  2BE0               	goto	l1255
   662     033F                     l1193:
   663                           
   664                           ;practica_1_PIC16F84A.c: 104:             if (key == '+') {
   665     033F  302B               	movlw	43
   666     0340  0632               	xorwf	main@key,w
   667     0341  1D03               	btfss	3,2
   668     0342  2B44               	goto	u811
   669     0343  2B45               	goto	u810
   670     0344                     u811:
   671     0344  2B4A               	goto	l1199
   672     0345                     u810:
   673     0345                     l1195:
   674                           
   675                           ;practica_1_PIC16F84A.c: 105:                 asciiMode = 1;
   676     0345  01C6               	clrf	_asciiMode
   677     0346  0AC6               	incf	_asciiMode,f
   678     0347                     l1197:
   679                           
   680                           ;practica_1_PIC16F84A.c: 106:                 asciiDigits = 0;
   681     0347  01C5               	clrf	_asciiDigits
   682                           
   683                           ;practica_1_PIC16F84A.c: 107:                 asciiValue[0] = '\0';
   684     0348  01C8               	clrf	_asciiValue
   685                           
   686                           ;practica_1_PIC16F84A.c: 108:             }
   687     0349  2BE0               	goto	l1255
   688     034A                     l1199:
   689     034A  302F               	movlw	47
   690     034B  0632               	xorwf	main@key,w
   691     034C  1D03               	btfss	3,2
   692     034D  2B4F               	goto	u821
   693     034E  2B50               	goto	u820
   694     034F                     u821:
   695     034F  2B58               	goto	l1205
   696     0350                     u820:
   697     0350                     l1201:
   698                           
   699                           ;practica_1_PIC16F84A.c: 111:                 if (cursorPosition > 0) cursorPosition--;
   700     0350  0847               	movf	_cursorPosition,w
   701     0351  1903               	btfsc	3,2
   702     0352  2B54               	goto	u831
   703     0353  2B55               	goto	u830
   704     0354                     u831:
   705     0354  2BE0               	goto	l1255
   706     0355                     u830:
   707     0355                     l1203:
   708     0355  3001               	movlw	1
   709     0356  02C7               	subwf	_cursorPosition,f
   710     0357  2BE0               	goto	l1255
   711     0358                     l1205:
   712     0358  3058               	movlw	88
   713     0359  0632               	xorwf	main@key,w
   714     035A  1D03               	btfss	3,2
   715     035B  2B5D               	goto	u841
   716     035C  2B5E               	goto	u840
   717     035D                     u841:
   718     035D  2B69               	goto	l1211
   719     035E                     u840:
   720     035E                     l1207:
   721                           
   722                           ;practica_1_PIC16F84A.c: 113:                 if (cursorPosition < charCount) cursorPosi
      +                          tion++;
   723     035E  0833               	movf	main@charCount,w
   724     035F  0247               	subwf	_cursorPosition,w
   725     0360  1803               	skipnc
   726     0361  2B63               	goto	u851
   727     0362  2B64               	goto	u850
   728     0363                     u851:
   729     0363  2BE0               	goto	l1255
   730     0364                     u850:
   731     0364                     l1209:
   732     0364  3001               	movlw	1
   733     0365  00CF               	movwf	btemp+1
   734     0366  084F               	movf	btemp+1,w
   735     0367  07C7               	addwf	_cursorPosition,f
   736     0368  2BE0               	goto	l1255
   737     0369                     l1211:
   738     0369  3043               	movlw	67
   739     036A  0632               	xorwf	main@key,w
   740     036B  1D03               	btfss	3,2
   741     036C  2B6E               	goto	u861
   742     036D  2B6F               	goto	u860
   743     036E                     u861:
   744     036E  2B9E               	goto	l1231
   745     036F                     u860:
   746     036F                     l1213:
   747                           
   748                           ;practica_1_PIC16F84A.c: 115:             for (unsigned char i = cursorPosition; i < cha
      +                          rCount; i++) {
   749     036F  0847               	movf	_cursorPosition,w
   750     0370  00B0               	movwf	main@i_121
   751     0371  2B82               	goto	l1219
   752     0372                     l1215:
   753                           
   754                           ;practica_1_PIC16F84A.c: 116:                 displayString[i] = displayString[i + 1];
   755     0372  0830               	movf	main@i_121,w
   756     0373  3E01               	addlw	1
   757     0374  3E1C               	addlw	(low (main@displayString| 0))& (0+255)
   758     0375  0084               	movwf	4
   759     0376  1383               	bcf	3,7	;select IRP bank0
   760     0377  0800               	movf	0,w
   761     0378  00CF               	movwf	btemp+1
   762     0379  0830               	movf	main@i_121,w
   763     037A  3E1C               	addlw	(low (main@displayString| 0))& (0+255)
   764     037B  0084               	movwf	4
   765     037C  084F               	movf	btemp+1,w
   766     037D  0080               	movwf	0
   767     037E                     l1217:
   768                           
   769                           ;practica_1_PIC16F84A.c: 117:             }
   770     037E  3001               	movlw	1
   771     037F  00CF               	movwf	btemp+1
   772     0380  084F               	movf	btemp+1,w
   773     0381  07B0               	addwf	main@i_121,f
   774     0382                     l1219:
   775     0382  0833               	movf	main@charCount,w
   776     0383  0230               	subwf	main@i_121,w
   777     0384  1C03               	skipc
   778     0385  2B87               	goto	u871
   779     0386  2B88               	goto	u870
   780     0387                     u871:
   781     0387  2B72               	goto	l1215
   782     0388                     u870:
   783     0388                     l1221:
   784                           
   785                           ;practica_1_PIC16F84A.c: 118:             if (charCount > 0) charCount--;
   786     0388  0833               	movf	main@charCount,w
   787     0389  1903               	btfsc	3,2
   788     038A  2B8C               	goto	u881
   789     038B  2B8D               	goto	u880
   790     038C                     u881:
   791     038C  2B8F               	goto	l1225
   792     038D                     u880:
   793     038D                     l1223:
   794     038D  3001               	movlw	1
   795     038E  02B3               	subwf	main@charCount,f
   796     038F                     l1225:
   797                           
   798                           ;practica_1_PIC16F84A.c: 120:             if (cursorPosition >= charCount && charCount >
      +                           0) cursorPosition = charCount - 1;
   799     038F  0833               	movf	main@charCount,w
   800     0390  0247               	subwf	_cursorPosition,w
   801     0391  1C03               	skipc
   802     0392  2B94               	goto	u891
   803     0393  2B95               	goto	u890
   804     0394                     u891:
   805     0394  2BE0               	goto	l1255
   806     0395                     u890:
   807     0395                     l1227:
   808     0395  0833               	movf	main@charCount,w
   809     0396  1903               	btfsc	3,2
   810     0397  2B99               	goto	u901
   811     0398  2B9A               	goto	u900
   812     0399                     u901:
   813     0399  2BE0               	goto	l1255
   814     039A                     u900:
   815     039A                     l1229:
   816     039A  0833               	movf	main@charCount,w
   817     039B  3EFF               	addlw	255
   818     039C  00C7               	movwf	_cursorPosition
   819     039D  2BE0               	goto	l1255
   820     039E                     l1231:
   821     039E  0832               	movf	main@key,w
   822     039F  1903               	btfsc	3,2
   823     03A0  2BA2               	goto	u911
   824     03A1  2BA3               	goto	u910
   825     03A2                     u911:
   826     03A2  2BE0               	goto	l1255
   827     03A3                     u910:
   828     03A3                     l1233:
   829     03A3  303D               	movlw	61
   830     03A4  0632               	xorwf	main@key,w
   831     03A5  1903               	btfsc	3,2
   832     03A6  2BA8               	goto	u921
   833     03A7  2BA9               	goto	u920
   834     03A8                     u921:
   835     03A8  2BE0               	goto	l1255
   836     03A9                     u920:
   837     03A9                     l1235:
   838                           
   839                           ;practica_1_PIC16F84A.c: 123:                 if (charCount < 15) {
   840     03A9  300F               	movlw	15
   841     03AA  0233               	subwf	main@charCount,w
   842     03AB  1803               	skipnc
   843     03AC  2BAE               	goto	u931
   844     03AD  2BAF               	goto	u930
   845     03AE                     u931:
   846     03AE  2BE0               	goto	l1255
   847     03AF                     u930:
   848     03AF                     l1237:
   849                           
   850                           ;practica_1_PIC16F84A.c: 124:                     for (unsigned char i = charCount; i > 
      +                          cursorPosition; i--) {
   851     03AF  0833               	movf	main@charCount,w
   852     03B0  00B1               	movwf	main@i_122
   853     03B1  2BC0               	goto	l1243
   854     03B2                     l1239:
   855                           
   856                           ;practica_1_PIC16F84A.c: 125:                         displayString[i] = displayString[i
      +                           - 1];
   857     03B2  0831               	movf	main@i_122,w
   858     03B3  3EFF               	addlw	255
   859     03B4  3E1C               	addlw	(low (main@displayString| 0))& (0+255)
   860     03B5  0084               	movwf	4
   861     03B6  1383               	bcf	3,7	;select IRP bank0
   862     03B7  0800               	movf	0,w
   863     03B8  00CF               	movwf	btemp+1
   864     03B9  0831               	movf	main@i_122,w
   865     03BA  3E1C               	addlw	(low (main@displayString| 0))& (0+255)
   866     03BB  0084               	movwf	4
   867     03BC  084F               	movf	btemp+1,w
   868     03BD  0080               	movwf	0
   869     03BE                     l1241:
   870                           
   871                           ;practica_1_PIC16F84A.c: 126:                     }
   872     03BE  3001               	movlw	1
   873     03BF  02B1               	subwf	main@i_122,f
   874     03C0                     l1243:
   875     03C0  0831               	movf	main@i_122,w
   876     03C1  0247               	subwf	_cursorPosition,w
   877     03C2  1C03               	skipc
   878     03C3  2BC5               	goto	u941
   879     03C4  2BC6               	goto	u940
   880     03C5                     u941:
   881     03C5  2BB2               	goto	l1239
   882     03C6                     u940:
   883     03C6                     l1245:
   884                           
   885                           ;practica_1_PIC16F84A.c: 127:                     displayString[cursorPosition] = key;
   886     03C6  0847               	movf	_cursorPosition,w
   887     03C7  3E1C               	addlw	(low (main@displayString| 0))& (0+255)
   888     03C8  0084               	movwf	4
   889     03C9  0832               	movf	main@key,w
   890     03CA  1383               	bcf	3,7	;select IRP bank0
   891     03CB  0080               	movwf	0
   892     03CC                     l1247:
   893                           
   894                           ;practica_1_PIC16F84A.c: 128:                     if (cursorPosition < 15) cursorPositio
      +                          n++;
   895     03CC  300F               	movlw	15
   896     03CD  0247               	subwf	_cursorPosition,w
   897     03CE  1803               	skipnc
   898     03CF  2BD1               	goto	u951
   899     03D0  2BD2               	goto	u950
   900     03D1                     u951:
   901     03D1  2BD6               	goto	l1251
   902     03D2                     u950:
   903     03D2                     l1249:
   904     03D2  3001               	movlw	1
   905     03D3  00CF               	movwf	btemp+1
   906     03D4  084F               	movf	btemp+1,w
   907     03D5  07C7               	addwf	_cursorPosition,f
   908     03D6                     l1251:
   909                           
   910                           ;practica_1_PIC16F84A.c: 129:                     if (charCount < 15) charCount++;
   911     03D6  300F               	movlw	15
   912     03D7  0233               	subwf	main@charCount,w
   913     03D8  1803               	skipnc
   914     03D9  2BDB               	goto	u961
   915     03DA  2BDC               	goto	u960
   916     03DB                     u961:
   917     03DB  2BE0               	goto	l1255
   918     03DC                     u960:
   919     03DC                     l1253:
   920     03DC  3001               	movlw	1
   921     03DD  00CF               	movwf	btemp+1
   922     03DE  084F               	movf	btemp+1,w
   923     03DF  07B3               	addwf	main@charCount,f
   924     03E0                     l1255:
   925                           
   926                           ;practica_1_PIC16F84A.c: 134:         Prepare_LCD_Pins();
   927     03E0  20D9               	fcall	_Prepare_LCD_Pins
   928     03E1                     l1257:
   929                           
   930                           ;practica_1_PIC16F84A.c: 135:         LCD_clear();
   931     03E1  20F4               	fcall	_LCD_clear
   932     03E2                     l1259:
   933                           
   934                           ;practica_1_PIC16F84A.c: 136:         LCD_setCursor(1, 0);
   935     03E2  1283               	bcf	3,5	;RP0=0, select bank0
   936     03E3  018F               	clrf	LCD_setCursor@column
   937     03E4  3001               	movlw	1
   938     03E5  213C               	fcall	_LCD_setCursor
   939     03E6                     l1261:
   940                           
   941                           ;practica_1_PIC16F84A.c: 137:         LCD_print(displayString);
   942     03E6  301C               	movlw	(low (main@displayString| 0))& (0+255)
   943     03E7  2127               	fcall	_LCD_print
   944     03E8                     l1263:
   945                           
   946                           ;practica_1_PIC16F84A.c: 138:         LCD_setCursor(1, cursorPosition);
   947     03E8  1283               	bcf	3,5	;RP0=0, select bank0
   948     03E9  0847               	movf	_cursorPosition,w
   949     03EA  008F               	movwf	LCD_setCursor@column
   950     03EB  3001               	movlw	1
   951     03EC  213C               	fcall	_LCD_setCursor
   952     03ED                     l1265:
   953                           
   954                           ;practica_1_PIC16F84A.c: 140:         _delay((unsigned long)((100)*(4000000/4000.0)));
   955     03ED  3082               	movlw	130
   956     03EE  1283               	bcf	3,5	;RP0=0, select bank0
   957     03EF  009B               	movwf	??_main+1
   958     03F0  30DD               	movlw	221
   959     03F1  009A               	movwf	??_main
   960     03F2                     u977:
   961     03F2  0B9A               	decfsz	??_main,f
   962     03F3  2BF2               	goto	u977
   963     03F4  0B9B               	decfsz	??_main+1,f
   964     03F5  2BF2               	goto	u977
   965     03F6  2BF7               	nop2
   966     03F7  2AB0               	goto	l1141
   967     03F8  2800               	ljmp	start
   968     03F9                     __end_of_main:
   969                           
   970                           	psect	text1
   971     01A2                     __ptext1:	
   972 ;; *************** function _atoi *****************
   973 ;; Defined at:
   974 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\atoi.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;  s               1    wreg     PTR const unsigned char 
   977 ;;		 -> asciiValue(4), 
   978 ;; Auto vars:     Size  Location     Type
   979 ;;  s               1   13[BANK0 ] PTR const unsigned char 
   980 ;;		 -> asciiValue(4), 
   981 ;;  n               2   11[BANK0 ] int 
   982 ;;  neg             1   10[BANK0 ] _Bool 
   983 ;; Return value:  Size  Location     Type
   984 ;;                  2    6[BANK0 ] int 
   985 ;; Registers used:
   986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   987 ;; Tracked objects:
   988 ;;		On entry : 0/0
   989 ;;		On exit  : 0/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMMON   BANK0
   992 ;;      Params:         0       2
   993 ;;      Locals:         0       4
   994 ;;      Temps:          0       2
   995 ;;      Totals:         0       8
   996 ;;Total ram usage:        8 bytes
   997 ;; Hardware stack levels used: 1
   998 ;; Hardware stack levels required when called: 1
   999 ;; This function calls:
  1000 ;;		___wmul
  1001 ;; This function is called by:
  1002 ;;		_main
  1003 ;; This function uses a non-reentrant model
  1004 ;;
  1005                           
  1006     01A2                     _atoi:	
  1007                           ;psect for function _atoi
  1008                           
  1009                           
  1010                           ;incstack = 0
  1011                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1012                           ;atoi@s stored from wreg
  1013     01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1014     01A3  0099               	movwf	atoi@s
  1015     01A4                     l1079:
  1016     01A4  0197               	clrf	atoi@n
  1017     01A5  0198               	clrf	atoi@n+1
  1018     01A6  0196               	clrf	atoi@neg
  1019     01A7  29AC               	goto	l1083
  1020     01A8                     l1081:
  1021     01A8  3001               	movlw	1
  1022     01A9  00CF               	movwf	btemp+1
  1023     01AA  084F               	movf	btemp+1,w
  1024     01AB  0799               	addwf	atoi@s,f
  1025     01AC                     l1083:
  1026     01AC  0819               	movf	atoi@s,w
  1027     01AD  0084               	movwf	4
  1028     01AE  3020               	movlw	32
  1029     01AF  1383               	bcf	3,7	;select IRP bank0
  1030     01B0  0600               	xorwf	0,w
  1031     01B1  1903               	btfsc	3,2
  1032     01B2  29B4               	goto	u611
  1033     01B3  29B5               	goto	u610
  1034     01B4                     u611:
  1035     01B4  29A8               	goto	l1081
  1036     01B5                     u610:
  1037     01B5                     l1085:
  1038     01B5  0819               	movf	atoi@s,w
  1039     01B6  0084               	movwf	4
  1040     01B7  30F7               	movlw	247
  1041     01B8  0700               	addwf	0,w
  1042     01B9  0094               	movwf	??_atoi
  1043     01BA  3005               	movlw	5
  1044     01BB  0214               	subwf	??_atoi,w
  1045     01BC  1C03               	skipc
  1046     01BD  29BF               	goto	u621
  1047     01BE  29C0               	goto	u620
  1048     01BF                     u621:
  1049     01BF  29A8               	goto	l1081
  1050     01C0                     u620:
  1051     01C0                     l1087:
  1052     01C0  0819               	movf	atoi@s,w
  1053     01C1  0084               	movwf	4
  1054     01C2  302D               	movlw	45
  1055     01C3  0600               	xorwf	0,w
  1056     01C4  1D03               	btfss	3,2
  1057     01C5  29C7               	goto	u631
  1058     01C6  29C8               	goto	u630
  1059     01C7                     u631:
  1060     01C7  29CF               	goto	l1093
  1061     01C8                     u630:
  1062     01C8                     l1089:
  1063     01C8  0196               	clrf	atoi@neg
  1064     01C9  0A96               	incf	atoi@neg,f
  1065     01CA                     l1091:
  1066     01CA  3001               	movlw	1
  1067     01CB  00CF               	movwf	btemp+1
  1068     01CC  084F               	movf	btemp+1,w
  1069     01CD  0799               	addwf	atoi@s,f
  1070     01CE  29F5               	goto	l1101
  1071     01CF                     l1093:
  1072     01CF  0819               	movf	atoi@s,w
  1073     01D0  0084               	movwf	4
  1074     01D1  302B               	movlw	43
  1075     01D2  0600               	xorwf	0,w
  1076     01D3  1D03               	btfss	3,2
  1077     01D4  29D6               	goto	u641
  1078     01D5  29D7               	goto	u640
  1079     01D6                     u641:
  1080     01D6  29F5               	goto	l1101
  1081     01D7                     u640:
  1082     01D7  29CA               	goto	l1091
  1083     01D8                     l1097:
  1084     01D8  0819               	movf	atoi@s,w
  1085     01D9  0084               	movwf	4
  1086     01DA  0818               	movf	atoi@n+1,w
  1087     01DB  008D               	movwf	___wmul@multiplier+1
  1088     01DC  0817               	movf	atoi@n,w
  1089     01DD  008C               	movwf	___wmul@multiplier
  1090     01DE  300A               	movlw	10
  1091     01DF  008E               	movwf	___wmul@multiplicand
  1092     01E0  3000               	movlw	0
  1093     01E1  008F               	movwf	___wmul@multiplicand+1
  1094     01E2  2155               	fcall	___wmul
  1095     01E3  1283               	bcf	3,5	;RP0=0, select bank0
  1096     01E4  080D               	movf	?___wmul+1,w
  1097     01E5  0095               	movwf	??_atoi+1
  1098     01E6  1383               	bcf	3,7	;select IRP bank0
  1099     01E7  0800               	movf	0,w
  1100     01E8  020C               	subwf	?___wmul,w
  1101     01E9  0094               	movwf	??_atoi
  1102     01EA  1C03               	skipc
  1103     01EB  0395               	decf	??_atoi+1,f
  1104     01EC  0814               	movf	??_atoi,w
  1105     01ED  3E30               	addlw	48
  1106     01EE  0097               	movwf	atoi@n
  1107     01EF  0815               	movf	??_atoi+1,w
  1108     01F0  1803               	skipnc
  1109     01F1  3E01               	addlw	1
  1110     01F2  3E00               	addlw	0
  1111     01F3  0098               	movwf	atoi@n+1
  1112     01F4  29CA               	goto	l1091
  1113     01F5                     l1101:
  1114     01F5  0819               	movf	atoi@s,w
  1115     01F6  0084               	movwf	4
  1116     01F7  30D0               	movlw	208
  1117     01F8  0700               	addwf	0,w
  1118     01F9  0094               	movwf	??_atoi
  1119     01FA  300A               	movlw	10
  1120     01FB  0214               	subwf	??_atoi,w
  1121     01FC  1C03               	skipc
  1122     01FD  29FF               	goto	u651
  1123     01FE  2A00               	goto	u650
  1124     01FF                     u651:
  1125     01FF  29D8               	goto	l1097
  1126     0200                     u650:
  1127     0200                     l1103:
  1128     0200  0816               	movf	atoi@neg,w
  1129     0201  1D03               	btfss	3,2
  1130     0202  2A04               	goto	u661
  1131     0203  2A05               	goto	u660
  1132     0204                     u661:
  1133     0204  2A11               	goto	l1107
  1134     0205                     u660:
  1135     0205                     l1105:
  1136     0205  0917               	comf	atoi@n,w
  1137     0206  0094               	movwf	??_atoi
  1138     0207  0918               	comf	atoi@n+1,w
  1139     0208  0095               	movwf	??_atoi+1
  1140     0209  0A94               	incf	??_atoi,f
  1141     020A  1903               	skipnz
  1142     020B  0A95               	incf	??_atoi+1,f
  1143     020C  0814               	movf	??_atoi,w
  1144     020D  0092               	movwf	?_atoi
  1145     020E  0815               	movf	??_atoi+1,w
  1146     020F  0093               	movwf	?_atoi+1
  1147     0210  2A15               	goto	l693
  1148     0211                     l1107:
  1149     0211  0818               	movf	atoi@n+1,w
  1150     0212  0093               	movwf	?_atoi+1
  1151     0213  0817               	movf	atoi@n,w
  1152     0214  0092               	movwf	?_atoi
  1153     0215                     l693:
  1154     0215  0008               	return
  1155     0216                     __end_of_atoi:
  1156                           
  1157                           	psect	text2
  1158     0155                     __ptext2:	
  1159 ;; *************** function ___wmul *****************
  1160 ;; Defined at:
  1161 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1164 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;  product         2    4[BANK0 ] unsigned int 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  2    0[BANK0 ] unsigned int 
  1169 ;; Registers used:
  1170 ;;		wreg, status,2, status,0
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMMON   BANK0
  1176 ;;      Params:         0       4
  1177 ;;      Locals:         0       2
  1178 ;;      Temps:          0       0
  1179 ;;      Totals:         0       6
  1180 ;;Total ram usage:        6 bytes
  1181 ;; Hardware stack levels used: 1
  1182 ;; This function calls:
  1183 ;;		Nothing
  1184 ;; This function is called by:
  1185 ;;		_atoi
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189     0155                     ___wmul:	
  1190                           ;psect for function ___wmul
  1191                           
  1192     0155                     l997:	
  1193                           ;incstack = 0
  1194                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1195                           
  1196     0155  1283               	bcf	3,5	;RP0=0, select bank0
  1197     0156  0190               	clrf	___wmul@product
  1198     0157  0191               	clrf	___wmul@product+1
  1199     0158                     l999:
  1200     0158  1C0C               	btfss	___wmul@multiplier,0
  1201     0159  295B               	goto	u491
  1202     015A  295C               	goto	u490
  1203     015B                     u491:
  1204     015B  2962               	goto	l221
  1205     015C                     u490:
  1206     015C                     l1001:
  1207     015C  080E               	movf	___wmul@multiplicand,w
  1208     015D  0790               	addwf	___wmul@product,f
  1209     015E  1803               	skipnc
  1210     015F  0A91               	incf	___wmul@product+1,f
  1211     0160  080F               	movf	___wmul@multiplicand+1,w
  1212     0161  0791               	addwf	___wmul@product+1,f
  1213     0162                     l221:
  1214     0162  3001               	movlw	1
  1215     0163                     u505:
  1216     0163  1003               	clrc
  1217     0164  0D8E               	rlf	___wmul@multiplicand,f
  1218     0165  0D8F               	rlf	___wmul@multiplicand+1,f
  1219     0166  3EFF               	addlw	-1
  1220     0167  1D03               	skipz
  1221     0168  2963               	goto	u505
  1222     0169                     l1003:
  1223     0169  3001               	movlw	1
  1224     016A                     u515:
  1225     016A  1003               	clrc
  1226     016B  0C8D               	rrf	___wmul@multiplier+1,f
  1227     016C  0C8C               	rrf	___wmul@multiplier,f
  1228     016D  3EFF               	addlw	-1
  1229     016E  1D03               	skipz
  1230     016F  296A               	goto	u515
  1231     0170                     l1005:
  1232     0170  080C               	movf	___wmul@multiplier,w
  1233     0171  040D               	iorwf	___wmul@multiplier+1,w
  1234     0172  1D03               	btfss	3,2
  1235     0173  2975               	goto	u521
  1236     0174  2976               	goto	u520
  1237     0175                     u521:
  1238     0175  2958               	goto	l999
  1239     0176                     u520:
  1240     0176                     l1007:
  1241     0176  0811               	movf	___wmul@product+1,w
  1242     0177  008D               	movwf	?___wmul+1
  1243     0178  0810               	movf	___wmul@product,w
  1244     0179  008C               	movwf	?___wmul
  1245     017A                     l223:
  1246     017A  0008               	return
  1247     017B                     __end_of___wmul:
  1248                           
  1249                           	psect	text3
  1250     0216                     __ptext3:	
  1251 ;; *************** function _Read_Keypad *****************
  1252 ;; Defined at:
  1253 ;;		line 203 in file "practica_1_PIC16F84A.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;		None
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;  col             2    4[BANK0 ] int 
  1258 ;;  row             2    2[BANK0 ] int 
  1259 ;; Return value:  Size  Location     Type
  1260 ;;                  1    wreg      unsigned char 
  1261 ;; Registers used:
  1262 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1263 ;; Tracked objects:
  1264 ;;		On entry : 0/0
  1265 ;;		On exit  : 0/0
  1266 ;;		Unchanged: 0/0
  1267 ;; Data sizes:     COMMON   BANK0
  1268 ;;      Params:         0       0
  1269 ;;      Locals:         0       4
  1270 ;;      Temps:          0       2
  1271 ;;      Totals:         0       6
  1272 ;;Total ram usage:        6 bytes
  1273 ;; Hardware stack levels used: 2
  1274 ;; This function calls:
  1275 ;;		Nothing
  1276 ;; This function is called by:
  1277 ;;		_main
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281     0216                     _Read_Keypad:	
  1282                           ;psect for function _Read_Keypad
  1283                           
  1284     0216                     l1035:	
  1285                           ;incstack = 0
  1286                           ; Regs used in _Read_Keypad: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1287                           
  1288                           
  1289                           ;practica_1_PIC16F84A.c: 204:     for(int row = 0; row < 4; row++) {
  1290     0216  1283               	bcf	3,5	;RP0=0, select bank0
  1291     0217  018E               	clrf	Read_Keypad@row
  1292     0218  018F               	clrf	Read_Keypad@row+1
  1293     0219                     l1037:
  1294     0219  080F               	movf	Read_Keypad@row+1,w
  1295     021A  3A80               	xorlw	128
  1296     021B  00CF               	movwf	btemp+1
  1297     021C  3080               	movlw	128
  1298     021D  024F               	subwf	btemp+1,w
  1299     021E  1D03               	skipz
  1300     021F  2A22               	goto	u535
  1301     0220  3004               	movlw	4
  1302     0221  020E               	subwf	Read_Keypad@row,w
  1303     0222                     u535:
  1304     0222  1C03               	skipc
  1305     0223  2A25               	goto	u531
  1306     0224  2A26               	goto	u530
  1307     0225                     u531:
  1308     0225  2A27               	goto	l1041
  1309     0226                     u530:
  1310     0226  2AA1               	goto	l1075
  1311     0227                     l1041:
  1312                           
  1313                           ;practica_1_PIC16F84A.c: 206:         PORTB = (unsigned char)~(0x10 << row);
  1314     0227  3010               	movlw	16
  1315     0228  1283               	bcf	3,5	;RP0=0, select bank0
  1316     0229  008C               	movwf	??_Read_Keypad
  1317     022A  0A0E               	incf	Read_Keypad@row,w
  1318     022B  2A2E               	goto	u544
  1319     022C                     u545:
  1320     022C  1003               	clrc
  1321     022D  0D8C               	rlf	??_Read_Keypad,f
  1322     022E                     u544:
  1323     022E  3EFF               	addlw	-1
  1324     022F  1D03               	skipz
  1325     0230  2A2C               	goto	u545
  1326     0231  080C               	movf	??_Read_Keypad,w
  1327     0232  3AFF               	xorlw	255
  1328     0233  0086               	movwf	6	;volatile
  1329     0234                     l1043:
  1330                           
  1331                           ;practica_1_PIC16F84A.c: 209:         TRISB = 0x0F;
  1332     0234  300F               	movlw	15
  1333     0235  1683               	bsf	3,5	;RP0=1, select bank1
  1334     0236  0086               	movwf	6	;volatile
  1335     0237                     l1045:
  1336                           
  1337                           ;practica_1_PIC16F84A.c: 211:         _delay((unsigned long)((20)*(4000000/4000.0)));
  1338     0237  301A               	movlw	26
  1339     0238  1283               	bcf	3,5	;RP0=0, select bank0
  1340     0239  008D               	movwf	??_Read_Keypad+1
  1341     023A  30F8               	movlw	248
  1342     023B  008C               	movwf	??_Read_Keypad
  1343     023C                     u987:
  1344     023C  0B8C               	decfsz	??_Read_Keypad,f
  1345     023D  2A3C               	goto	u987
  1346     023E  0B8D               	decfsz	??_Read_Keypad+1,f
  1347     023F  2A3C               	goto	u987
  1348     0240  0000               	nop
  1349     0241                     l1047:
  1350                           
  1351                           ;practica_1_PIC16F84A.c: 213:         for(int col = 0; col < 4; col++) {
  1352     0241  1283               	bcf	3,5	;RP0=0, select bank0
  1353     0242  0190               	clrf	Read_Keypad@col
  1354     0243  0191               	clrf	Read_Keypad@col+1
  1355     0244                     l1053:
  1356                           
  1357                           ;practica_1_PIC16F84A.c: 215:             if(!(PORTB & (0x01 << col))) {
  1358     0244  3001               	movlw	1
  1359     0245  1283               	bcf	3,5	;RP0=0, select bank0
  1360     0246  008C               	movwf	??_Read_Keypad
  1361     0247  0A10               	incf	Read_Keypad@col,w
  1362     0248  2A4B               	goto	u554
  1363     0249                     u555:
  1364     0249  1003               	clrc
  1365     024A  0D8C               	rlf	??_Read_Keypad,f
  1366     024B                     u554:
  1367     024B  3EFF               	addlw	-1
  1368     024C  1D03               	skipz
  1369     024D  2A49               	goto	u555
  1370     024E  080C               	movf	??_Read_Keypad,w
  1371     024F  0506               	andwf	6,w	;volatile
  1372     0250  1D03               	btfss	3,2
  1373     0251  2A53               	goto	u561
  1374     0252  2A54               	goto	u560
  1375     0253                     u561:
  1376     0253  2A83               	goto	l1067
  1377     0254                     u560:
  1378     0254                     l1057:
  1379     0254  3001               	movlw	1
  1380     0255  008C               	movwf	??_Read_Keypad
  1381     0256  0A10               	incf	Read_Keypad@col,w
  1382     0257  2A5A               	goto	u574
  1383     0258                     u575:
  1384     0258  1003               	clrc
  1385     0259  0D8C               	rlf	??_Read_Keypad,f
  1386     025A                     u574:
  1387     025A  3EFF               	addlw	-1
  1388     025B  1D03               	skipz
  1389     025C  2A58               	goto	u575
  1390     025D  080C               	movf	??_Read_Keypad,w
  1391     025E  0506               	andwf	6,w	;volatile
  1392     025F  1903               	btfsc	3,2
  1393     0260  2A62               	goto	u581
  1394     0261  2A63               	goto	u580
  1395     0262                     u581:
  1396     0262  2A54               	goto	l1057
  1397     0263                     u580:
  1398     0263                     l128:
  1399                           
  1400                           ;practica_1_PIC16F84A.c: 217:                 PORTAbits.RA3 = 0;
  1401     0263  1185               	bcf	5,3	;volatile
  1402     0264                     l1059:
  1403                           
  1404                           ;practica_1_PIC16F84A.c: 218:                 _delay((unsigned long)((100)*(4000000/4000
      +                          .0)));
  1405     0264  3082               	movlw	130
  1406     0265  008D               	movwf	??_Read_Keypad+1
  1407     0266  30DD               	movlw	221
  1408     0267  008C               	movwf	??_Read_Keypad
  1409     0268                     u997:
  1410     0268  0B8C               	decfsz	??_Read_Keypad,f
  1411     0269  2A68               	goto	u997
  1412     026A  0B8D               	decfsz	??_Read_Keypad+1,f
  1413     026B  2A68               	goto	u997
  1414     026C  2A6D               	nop2
  1415     026D                     l1061:
  1416                           
  1417                           ;practica_1_PIC16F84A.c: 219:                 PORTAbits.RA3 = 1;
  1418     026D  1283               	bcf	3,5	;RP0=0, select bank0
  1419     026E  1585               	bsf	5,3	;volatile
  1420                           
  1421                           ;practica_1_PIC16F84A.c: 221:                 TRISB = 0xF0;
  1422     026F  30F0               	movlw	240
  1423     0270  1683               	bsf	3,5	;RP0=1, select bank1
  1424     0271  0086               	movwf	6	;volatile
  1425     0272                     l1063:
  1426                           
  1427                           ;practica_1_PIC16F84A.c: 223:                 return teclas[row][col];
  1428     0272  1283               	bcf	3,5	;RP0=0, select bank0
  1429     0273  080E               	movf	Read_Keypad@row,w
  1430     0274  008C               	movwf	??_Read_Keypad
  1431     0275  3002               	movlw	2
  1432     0276                     u595:
  1433     0276  1003               	clrc
  1434     0277  0D8C               	rlf	??_Read_Keypad,f
  1435     0278  3EFF               	addlw	-1
  1436     0279  1D03               	skipz
  1437     027A  2A76               	goto	u595
  1438     027B  3001               	movlw	(low ((_teclas-__stringbase)| (0+32768)))& (0+255)
  1439     027C  070C               	addwf	??_Read_Keypad,w
  1440     027D  008D               	movwf	??_Read_Keypad+1
  1441     027E  0810               	movf	Read_Keypad@col,w
  1442     027F  070D               	addwf	??_Read_Keypad+1,w
  1443     0280  0084               	movwf	4
  1444     0281  2001               	fcall	stringdir
  1445     0282  2AA2               	goto	l129
  1446     0283                     l1067:
  1447                           
  1448                           ;practica_1_PIC16F84A.c: 225:         }
  1449     0283  3001               	movlw	1
  1450     0284  0790               	addwf	Read_Keypad@col,f
  1451     0285  1803               	skipnc
  1452     0286  0A91               	incf	Read_Keypad@col+1,f
  1453     0287  3000               	movlw	0
  1454     0288  0791               	addwf	Read_Keypad@col+1,f
  1455     0289                     l1069:
  1456     0289  0811               	movf	Read_Keypad@col+1,w
  1457     028A  3A80               	xorlw	128
  1458     028B  00CF               	movwf	btemp+1
  1459     028C  3080               	movlw	128
  1460     028D  024F               	subwf	btemp+1,w
  1461     028E  1D03               	skipz
  1462     028F  2A92               	goto	u605
  1463     0290  3004               	movlw	4
  1464     0291  0210               	subwf	Read_Keypad@col,w
  1465     0292                     u605:
  1466     0292  1C03               	skipc
  1467     0293  2A95               	goto	u601
  1468     0294  2A96               	goto	u600
  1469     0295                     u601:
  1470     0295  2A44               	goto	l1053
  1471     0296                     u600:
  1472     0296                     l1071:
  1473                           
  1474                           ;practica_1_PIC16F84A.c: 228:         TRISB = 0xF0;
  1475     0296  30F0               	movlw	240
  1476     0297  1683               	bsf	3,5	;RP0=1, select bank1
  1477     0298  0086               	movwf	6	;volatile
  1478                           
  1479                           ;practica_1_PIC16F84A.c: 229:     }
  1480     0299  3001               	movlw	1
  1481     029A  1283               	bcf	3,5	;RP0=0, select bank0
  1482     029B  078E               	addwf	Read_Keypad@row,f
  1483     029C  1803               	skipnc
  1484     029D  0A8F               	incf	Read_Keypad@row+1,f
  1485     029E  3000               	movlw	0
  1486     029F  078F               	addwf	Read_Keypad@row+1,f
  1487     02A0  2A19               	goto	l1037
  1488     02A1                     l1075:
  1489                           
  1490                           ;practica_1_PIC16F84A.c: 231:     return 0;
  1491     02A1  3000               	movlw	0
  1492     02A2                     l129:
  1493     02A2  0008               	return
  1494     02A3                     __end_of_Read_Keypad:
  1495                           
  1496                           	psect	text4
  1497     00D9                     __ptext4:	
  1498 ;; *************** function _Prepare_LCD_Pins *****************
  1499 ;; Defined at:
  1500 ;;		line 236 in file "practica_1_PIC16F84A.c"
  1501 ;; Parameters:    Size  Location     Type
  1502 ;;		None
  1503 ;; Auto vars:     Size  Location     Type
  1504 ;;		None
  1505 ;; Return value:  Size  Location     Type
  1506 ;;                  1    wreg      void 
  1507 ;; Registers used:
  1508 ;;		status,2
  1509 ;; Tracked objects:
  1510 ;;		On entry : 0/0
  1511 ;;		On exit  : 0/0
  1512 ;;		Unchanged: 0/0
  1513 ;; Data sizes:     COMMON   BANK0
  1514 ;;      Params:         0       0
  1515 ;;      Locals:         0       0
  1516 ;;      Temps:          0       0
  1517 ;;      Totals:         0       0
  1518 ;;Total ram usage:        0 bytes
  1519 ;; Hardware stack levels used: 1
  1520 ;; This function calls:
  1521 ;;		Nothing
  1522 ;; This function is called by:
  1523 ;;		_main
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527     00D9                     _Prepare_LCD_Pins:	
  1528                           ;psect for function _Prepare_LCD_Pins
  1529                           
  1530     00D9                     l1111:	
  1531                           ;incstack = 0
  1532                           ; Regs used in _Prepare_LCD_Pins: [status,2]
  1533                           
  1534                           
  1535                           ;practica_1_PIC16F84A.c: 238:     TRISB = 0x00;
  1536     00D9  1683               	bsf	3,5	;RP0=1, select bank1
  1537     00DA  0186               	clrf	6	;volatile
  1538     00DB                     l132:
  1539     00DB  0008               	return
  1540     00DC                     __end_of_Prepare_LCD_Pins:
  1541                           
  1542                           	psect	text5
  1543     00DC                     __ptext5:	
  1544 ;; *************** function _Prepare_Keypad_Pins *****************
  1545 ;; Defined at:
  1546 ;;		line 241 in file "practica_1_PIC16F84A.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;		None
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;		None
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMMON   BANK0
  1560 ;;      Params:         0       0
  1561 ;;      Locals:         0       0
  1562 ;;      Temps:          0       0
  1563 ;;      Totals:         0       0
  1564 ;;Total ram usage:        0 bytes
  1565 ;; Hardware stack levels used: 1
  1566 ;; This function calls:
  1567 ;;		Nothing
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573     00DC                     _Prepare_Keypad_Pins:	
  1574                           ;psect for function _Prepare_Keypad_Pins
  1575                           
  1576     00DC                     l1033:	
  1577                           ;incstack = 0
  1578                           ; Regs used in _Prepare_Keypad_Pins: [wreg]
  1579                           
  1580                           
  1581                           ;practica_1_PIC16F84A.c: 243:     TRISB = 0xF0;
  1582     00DC  30F0               	movlw	240
  1583     00DD  1683               	bsf	3,5	;RP0=1, select bank1
  1584     00DE  0086               	movwf	6	;volatile
  1585                           
  1586                           ;practica_1_PIC16F84A.c: 244:     PORTB = 0x0F;
  1587     00DF  300F               	movlw	15
  1588     00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1589     00E1  0086               	movwf	6	;volatile
  1590     00E2                     l135:
  1591     00E2  0008               	return
  1592     00E3                     __end_of_Prepare_Keypad_Pins:
  1593                           
  1594                           	psect	text6
  1595     013C                     __ptext6:	
  1596 ;; *************** function _LCD_setCursor *****************
  1597 ;; Defined at:
  1598 ;;		line 181 in file "practica_1_PIC16F84A.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  row             1    wreg     unsigned char 
  1601 ;;  column          1    3[BANK0 ] unsigned char 
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;  row             1    4[BANK0 ] unsigned char 
  1604 ;;  position        1    7[BANK0 ] unsigned char 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMMON   BANK0
  1614 ;;      Params:         0       1
  1615 ;;      Locals:         0       4
  1616 ;;      Temps:          0       0
  1617 ;;      Totals:         0       5
  1618 ;;Total ram usage:        5 bytes
  1619 ;; Hardware stack levels used: 1
  1620 ;; Hardware stack levels required when called: 1
  1621 ;; This function calls:
  1622 ;;		_LCD_command
  1623 ;; This function is called by:
  1624 ;;		_main
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628     013C                     _LCD_setCursor:	
  1629                           ;psect for function _LCD_setCursor
  1630                           
  1631                           
  1632                           ;incstack = 0
  1633                           ; Regs used in _LCD_setCursor: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1634                           ;LCD_setCursor@row stored from wreg
  1635     013C  1283               	bcf	3,5	;RP0=0, select bank0
  1636     013D  0090               	movwf	LCD_setCursor@row
  1637     013E                     l1117:
  1638                           
  1639                           ;practica_1_PIC16F84A.c: 182:     unsigned char position = (row == 1) ? 0x80 : 0xC0;
  1640     013E  0310               	decf	LCD_setCursor@row,w
  1641     013F  1903               	btfsc	3,2
  1642     0140  2942               	goto	u671
  1643     0141  2943               	goto	u670
  1644     0142                     u671:
  1645     0142  2948               	goto	l1121
  1646     0143                     u670:
  1647     0143                     l1119:
  1648     0143  30C0               	movlw	192
  1649     0144  0091               	movwf	_LCD_setCursor$134
  1650     0145  3000               	movlw	0
  1651     0146  0092               	movwf	_LCD_setCursor$134+1
  1652     0147  294C               	goto	l108
  1653     0148                     l1121:
  1654     0148  3080               	movlw	128
  1655     0149  0091               	movwf	_LCD_setCursor$134
  1656     014A  3000               	movlw	0
  1657     014B  0092               	movwf	_LCD_setCursor$134+1
  1658     014C                     l108:
  1659     014C  0811               	movf	_LCD_setCursor$134,w
  1660     014D  0093               	movwf	LCD_setCursor@position
  1661     014E                     l1123:
  1662                           
  1663                           ;practica_1_PIC16F84A.c: 183:     position += column;
  1664     014E  080F               	movf	LCD_setCursor@column,w
  1665     014F  00CF               	movwf	btemp+1
  1666     0150  084F               	movf	btemp+1,w
  1667     0151  0793               	addwf	LCD_setCursor@position,f
  1668     0152                     l1125:
  1669                           
  1670                           ;practica_1_PIC16F84A.c: 184:     LCD_command(position);
  1671     0152  0813               	movf	LCD_setCursor@position,w
  1672     0153  2101               	fcall	_LCD_command
  1673     0154                     l109:
  1674     0154  0008               	return
  1675     0155                     __end_of_LCD_setCursor:
  1676                           
  1677                           	psect	text7
  1678     0127                     __ptext7:	
  1679 ;; *************** function _LCD_print *****************
  1680 ;; Defined at:
  1681 ;;		line 187 in file "practica_1_PIC16F84A.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  string          1    wreg     PTR const unsigned char 
  1684 ;;		 -> main@displayString(17), 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  string          1    3[BANK0 ] PTR const unsigned char 
  1687 ;;		 -> main@displayString(17), 
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      void 
  1690 ;; Registers used:
  1691 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMMON   BANK0
  1697 ;;      Params:         0       0
  1698 ;;      Locals:         0       1
  1699 ;;      Temps:          0       0
  1700 ;;      Totals:         0       1
  1701 ;;Total ram usage:        1 bytes
  1702 ;; Hardware stack levels used: 1
  1703 ;; Hardware stack levels required when called: 1
  1704 ;; This function calls:
  1705 ;;		_LCD_data
  1706 ;; This function is called by:
  1707 ;;		_main
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711     0127                     _LCD_print:	
  1712                           ;psect for function _LCD_print
  1713                           
  1714                           
  1715                           ;incstack = 0
  1716                           ; Regs used in _LCD_print: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1717                           ;LCD_print@string stored from wreg
  1718     0127  1283               	bcf	3,5	;RP0=0, select bank0
  1719     0128  008F               	movwf	LCD_print@string
  1720     0129                     l1127:
  1721                           
  1722                           ;practica_1_PIC16F84A.c: 188:     while(*string) {
  1723     0129  2933               	goto	l1133
  1724     012A                     l1129:
  1725                           
  1726                           ;practica_1_PIC16F84A.c: 189:         LCD_data(*string++);
  1727     012A  080F               	movf	LCD_print@string,w
  1728     012B  0084               	movwf	4
  1729     012C  0800               	movf	0,w
  1730     012D  2114               	fcall	_LCD_data
  1731     012E                     l1131:
  1732     012E  3001               	movlw	1
  1733     012F  00CF               	movwf	btemp+1
  1734     0130  084F               	movf	btemp+1,w
  1735     0131  1283               	bcf	3,5	;RP0=0, select bank0
  1736     0132  078F               	addwf	LCD_print@string,f
  1737     0133                     l1133:
  1738                           
  1739                           ;practica_1_PIC16F84A.c: 188:     while(*string) {
  1740     0133  080F               	movf	LCD_print@string,w
  1741     0134  0084               	movwf	4
  1742     0135  1383               	bcf	3,7	;select IRP bank0
  1743     0136  0800               	movf	0,w
  1744     0137  1D03               	btfss	3,2
  1745     0138  293A               	goto	u681
  1746     0139  293B               	goto	u680
  1747     013A                     u681:
  1748     013A  292A               	goto	l1129
  1749     013B                     u680:
  1750     013B                     l115:
  1751     013B  0008               	return
  1752     013C                     __end_of_LCD_print:
  1753                           
  1754                           	psect	text8
  1755     0114                     __ptext8:	
  1756 ;; *************** function _LCD_data *****************
  1757 ;; Defined at:
  1758 ;;		line 155 in file "practica_1_PIC16F84A.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;  data            1    wreg     unsigned char 
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;  data            1    2[BANK0 ] unsigned char 
  1763 ;; Return value:  Size  Location     Type
  1764 ;;                  1    wreg      void 
  1765 ;; Registers used:
  1766 ;;		wreg
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMMON   BANK0
  1772 ;;      Params:         0       0
  1773 ;;      Locals:         0       1
  1774 ;;      Temps:          0       2
  1775 ;;      Totals:         0       3
  1776 ;;Total ram usage:        3 bytes
  1777 ;; Hardware stack levels used: 1
  1778 ;; This function calls:
  1779 ;;		Nothing
  1780 ;; This function is called by:
  1781 ;;		_LCD_print
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785     0114                     _LCD_data:	
  1786                           ;psect for function _LCD_data
  1787                           
  1788                           
  1789                           ;incstack = 0
  1790                           ; Regs used in _LCD_data: [wreg]
  1791                           ;LCD_data@data stored from wreg
  1792     0114  1283               	bcf	3,5	;RP0=0, select bank0
  1793     0115  008E               	movwf	LCD_data@data
  1794     0116                     l989:
  1795                           
  1796                           ;practica_1_PIC16F84A.c: 156:     RA0 = 1;
  1797     0116  1405               	bsf	5,0	;volatile
  1798                           
  1799                           ;practica_1_PIC16F84A.c: 157:     RA1 = 0;
  1800     0117  1085               	bcf	5,1	;volatile
  1801     0118                     l991:
  1802                           
  1803                           ;practica_1_PIC16F84A.c: 158:     PORTB = data;
  1804     0118  080E               	movf	LCD_data@data,w
  1805     0119  0086               	movwf	6	;volatile
  1806     011A                     l993:
  1807                           
  1808                           ;practica_1_PIC16F84A.c: 159:     RA2 = 1;
  1809     011A  1505               	bsf	5,2	;volatile
  1810                           
  1811                           ;practica_1_PIC16F84A.c: 160:     _delay((unsigned long)((2)*(4000000/4000.0)));
  1812     011B  3003               	movlw	3
  1813     011C  008D               	movwf	??_LCD_data+1
  1814     011D  3097               	movlw	151
  1815     011E  008C               	movwf	??_LCD_data
  1816     011F                     u1007:
  1817     011F  0B8C               	decfsz	??_LCD_data,f
  1818     0120  291F               	goto	u1007
  1819     0121  0B8D               	decfsz	??_LCD_data+1,f
  1820     0122  291F               	goto	u1007
  1821     0123  2924               	nop2
  1822     0124                     l995:
  1823                           
  1824                           ;practica_1_PIC16F84A.c: 161:     RA2 = 0;
  1825     0124  1283               	bcf	3,5	;RP0=0, select bank0
  1826     0125  1105               	bcf	5,2	;volatile
  1827     0126                     l96:
  1828     0126  0008               	return
  1829     0127                     __end_of_LCD_data:
  1830                           
  1831                           	psect	text9
  1832     017B                     __ptext9:	
  1833 ;; *************** function _LCD_init *****************
  1834 ;; Defined at:
  1835 ;;		line 164 in file "practica_1_PIC16F84A.c"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;		None
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;		None
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  1    wreg      void 
  1842 ;; Registers used:
  1843 ;;		wreg, status,2, status,0, pclath, cstack
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMMON   BANK0
  1849 ;;      Params:         0       0
  1850 ;;      Locals:         0       0
  1851 ;;      Temps:          0       2
  1852 ;;      Totals:         0       2
  1853 ;;Total ram usage:        2 bytes
  1854 ;; Hardware stack levels used: 1
  1855 ;; Hardware stack levels required when called: 1
  1856 ;; This function calls:
  1857 ;;		_LCD_command
  1858 ;; This function is called by:
  1859 ;;		_main
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862                           
  1863     017B                     _LCD_init:	
  1864                           ;psect for function _LCD_init
  1865                           
  1866     017B                     l1011:	
  1867                           ;incstack = 0
  1868                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  1869                           
  1870                           
  1871                           ;practica_1_PIC16F84A.c: 165:     TRISA = 0x00;
  1872     017B  1683               	bsf	3,5	;RP0=1, select bank1
  1873     017C  0185               	clrf	5	;volatile
  1874                           
  1875                           ;practica_1_PIC16F84A.c: 166:     TRISB = 0x00;
  1876     017D  0186               	clrf	6	;volatile
  1877     017E                     l1013:
  1878                           
  1879                           ;practica_1_PIC16F84A.c: 167:     _delay((unsigned long)((20)*(4000000/4000.0)));
  1880     017E  301A               	movlw	26
  1881     017F  1283               	bcf	3,5	;RP0=0, select bank0
  1882     0180  0090               	movwf	??_LCD_init+1
  1883     0181  30F8               	movlw	248
  1884     0182  008F               	movwf	??_LCD_init
  1885     0183                     u1017:
  1886     0183  0B8F               	decfsz	??_LCD_init,f
  1887     0184  2983               	goto	u1017
  1888     0185  0B90               	decfsz	??_LCD_init+1,f
  1889     0186  2983               	goto	u1017
  1890     0187  0000               	nop
  1891     0188                     l1015:
  1892                           
  1893                           ;practica_1_PIC16F84A.c: 168:     LCD_command(0x38);
  1894     0188  3038               	movlw	56
  1895     0189  2101               	fcall	_LCD_command
  1896     018A                     l1017:
  1897                           
  1898                           ;practica_1_PIC16F84A.c: 169:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1899     018A  3007               	movlw	7
  1900     018B  1283               	bcf	3,5	;RP0=0, select bank0
  1901     018C  0090               	movwf	??_LCD_init+1
  1902     018D  307D               	movlw	125
  1903     018E  008F               	movwf	??_LCD_init
  1904     018F                     u1027:
  1905     018F  0B8F               	decfsz	??_LCD_init,f
  1906     0190  298F               	goto	u1027
  1907     0191  0B90               	decfsz	??_LCD_init+1,f
  1908     0192  298F               	goto	u1027
  1909     0193                     l1019:
  1910                           
  1911                           ;practica_1_PIC16F84A.c: 170:     LCD_command(0x0F);
  1912     0193  300F               	movlw	15
  1913     0194  2101               	fcall	_LCD_command
  1914     0195                     l1021:
  1915                           
  1916                           ;practica_1_PIC16F84A.c: 171:     LCD_command(0x01);
  1917     0195  3001               	movlw	1
  1918     0196  2101               	fcall	_LCD_command
  1919     0197                     l1023:
  1920                           
  1921                           ;practica_1_PIC16F84A.c: 172:     _delay((unsigned long)((2)*(4000000/4000.0)));
  1922     0197  3003               	movlw	3
  1923     0198  1283               	bcf	3,5	;RP0=0, select bank0
  1924     0199  0090               	movwf	??_LCD_init+1
  1925     019A  3097               	movlw	151
  1926     019B  008F               	movwf	??_LCD_init
  1927     019C                     u1037:
  1928     019C  0B8F               	decfsz	??_LCD_init,f
  1929     019D  299C               	goto	u1037
  1930     019E  0B90               	decfsz	??_LCD_init+1,f
  1931     019F  299C               	goto	u1037
  1932     01A0  29A1               	nop2
  1933     01A1                     l99:
  1934     01A1  0008               	return
  1935     01A2                     __end_of_LCD_init:
  1936                           
  1937                           	psect	text10
  1938     00F4                     __ptext10:	
  1939 ;; *************** function _LCD_clear *****************
  1940 ;; Defined at:
  1941 ;;		line 176 in file "practica_1_PIC16F84A.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;		None
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;		None
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      void 
  1948 ;; Registers used:
  1949 ;;		wreg, status,2, status,0, pclath, cstack
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMMON   BANK0
  1955 ;;      Params:         0       0
  1956 ;;      Locals:         0       0
  1957 ;;      Temps:          0       2
  1958 ;;      Totals:         0       2
  1959 ;;Total ram usage:        2 bytes
  1960 ;; Hardware stack levels used: 1
  1961 ;; Hardware stack levels required when called: 1
  1962 ;; This function calls:
  1963 ;;		_LCD_command
  1964 ;; This function is called by:
  1965 ;;		_main
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969     00F4                     _LCD_clear:	
  1970                           ;psect for function _LCD_clear
  1971                           
  1972     00F4                     l1113:	
  1973                           ;incstack = 0
  1974                           ; Regs used in _LCD_clear: [wreg+status,2+status,0+pclath+cstack]
  1975                           
  1976                           
  1977                           ;practica_1_PIC16F84A.c: 177:     LCD_command(0x01);
  1978     00F4  3001               	movlw	1
  1979     00F5  2101               	fcall	_LCD_command
  1980     00F6                     l1115:
  1981                           
  1982                           ;practica_1_PIC16F84A.c: 178:     _delay((unsigned long)((2)*(4000000/4000.0)));
  1983     00F6  3003               	movlw	3
  1984     00F7  1283               	bcf	3,5	;RP0=0, select bank0
  1985     00F8  0090               	movwf	??_LCD_clear+1
  1986     00F9  3097               	movlw	151
  1987     00FA  008F               	movwf	??_LCD_clear
  1988     00FB                     u1047:
  1989     00FB  0B8F               	decfsz	??_LCD_clear,f
  1990     00FC  28FB               	goto	u1047
  1991     00FD  0B90               	decfsz	??_LCD_clear+1,f
  1992     00FE  28FB               	goto	u1047
  1993     00FF  2900               	nop2
  1994     0100                     l102:
  1995     0100  0008               	return
  1996     0101                     __end_of_LCD_clear:
  1997                           
  1998                           	psect	text11
  1999     0101                     __ptext11:	
  2000 ;; *************** function _LCD_command *****************
  2001 ;; Defined at:
  2002 ;;		line 146 in file "practica_1_PIC16F84A.c"
  2003 ;; Parameters:    Size  Location     Type
  2004 ;;  command         1    wreg     unsigned char 
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;  command         1    2[BANK0 ] unsigned char 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  1    wreg      void 
  2009 ;; Registers used:
  2010 ;;		wreg
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMMON   BANK0
  2016 ;;      Params:         0       0
  2017 ;;      Locals:         0       1
  2018 ;;      Temps:          0       2
  2019 ;;      Totals:         0       3
  2020 ;;Total ram usage:        3 bytes
  2021 ;; Hardware stack levels used: 1
  2022 ;; This function calls:
  2023 ;;		Nothing
  2024 ;; This function is called by:
  2025 ;;		_LCD_init
  2026 ;;		_LCD_clear
  2027 ;;		_LCD_setCursor
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031     0101                     _LCD_command:	
  2032                           ;psect for function _LCD_command
  2033                           
  2034                           
  2035                           ;incstack = 0
  2036                           ; Regs used in _LCD_command: [wreg]
  2037                           ;LCD_command@command stored from wreg
  2038     0101  1283               	bcf	3,5	;RP0=0, select bank0
  2039     0102  008E               	movwf	LCD_command@command
  2040     0103                     l981:
  2041                           
  2042                           ;practica_1_PIC16F84A.c: 147:     RA0 = 0;
  2043     0103  1005               	bcf	5,0	;volatile
  2044                           
  2045                           ;practica_1_PIC16F84A.c: 148:     RA1 = 0;
  2046     0104  1085               	bcf	5,1	;volatile
  2047     0105                     l983:
  2048                           
  2049                           ;practica_1_PIC16F84A.c: 149:     PORTB = command;
  2050     0105  080E               	movf	LCD_command@command,w
  2051     0106  0086               	movwf	6	;volatile
  2052     0107                     l985:
  2053                           
  2054                           ;practica_1_PIC16F84A.c: 150:     RA2 = 1;
  2055     0107  1505               	bsf	5,2	;volatile
  2056                           
  2057                           ;practica_1_PIC16F84A.c: 151:     _delay((unsigned long)((2)*(4000000/4000.0)));
  2058     0108  3003               	movlw	3
  2059     0109  008D               	movwf	??_LCD_command+1
  2060     010A  3097               	movlw	151
  2061     010B  008C               	movwf	??_LCD_command
  2062     010C                     u1057:
  2063     010C  0B8C               	decfsz	??_LCD_command,f
  2064     010D  290C               	goto	u1057
  2065     010E  0B8D               	decfsz	??_LCD_command+1,f
  2066     010F  290C               	goto	u1057
  2067     0110  2911               	nop2
  2068     0111                     l987:
  2069                           
  2070                           ;practica_1_PIC16F84A.c: 152:     RA2 = 0;
  2071     0111  1283               	bcf	3,5	;RP0=0, select bank0
  2072     0112  1105               	bcf	5,2	;volatile
  2073     0113                     l93:
  2074     0113  0008               	return
  2075     0114                     __end_of_LCD_command:
  2076                           
  2077                           	psect	text12
  2078     00EB                     __ptext12:	
  2079 ;; *************** function _Keyboard_init *****************
  2080 ;; Defined at:
  2081 ;;		line 195 in file "practica_1_PIC16F84A.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;		None
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;		None
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  1    wreg      void 
  2088 ;; Registers used:
  2089 ;;		wreg, status,2
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMMON   BANK0
  2095 ;;      Params:         0       0
  2096 ;;      Locals:         0       0
  2097 ;;      Temps:          0       0
  2098 ;;      Totals:         0       0
  2099 ;;Total ram usage:        0 bytes
  2100 ;; Hardware stack levels used: 1
  2101 ;; This function calls:
  2102 ;;		Nothing
  2103 ;; This function is called by:
  2104 ;;		_main
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108     00EB                     _Keyboard_init:	
  2109                           ;psect for function _Keyboard_init
  2110                           
  2111     00EB                     l1025:	
  2112                           ;incstack = 0
  2113                           ; Regs used in _Keyboard_init: [wreg+status,2]
  2114                           
  2115                           
  2116                           ;practica_1_PIC16F84A.c: 196:     TRISAbits.TRISA3 = 0;
  2117     00EB  1683               	bsf	3,5	;RP0=1, select bank1
  2118     00EC  1185               	bcf	5,3	;volatile
  2119     00ED                     l1027:
  2120                           
  2121                           ;practica_1_PIC16F84A.c: 197:     TRISA = 0x00;
  2122     00ED  0185               	clrf	5	;volatile
  2123     00EE                     l1029:
  2124                           
  2125                           ;practica_1_PIC16F84A.c: 198:     TRISB = 0x0F;
  2126     00EE  300F               	movlw	15
  2127     00EF  0086               	movwf	6	;volatile
  2128     00F0                     l1031:
  2129                           
  2130                           ;practica_1_PIC16F84A.c: 199:     PORTB = 0xF0;
  2131     00F0  30F0               	movlw	240
  2132     00F1  1283               	bcf	3,5	;RP0=0, select bank0
  2133     00F2  0086               	movwf	6	;volatile
  2134     00F3                     l118:
  2135     00F3  0008               	return
  2136     00F4                     __end_of_Keyboard_init:
  2137     004E                     btemp	set	78	;btemp
  2138     004E                     wtemp0	set	78
  2139                           
  2140                           	psect	config
  2141                           
  2142                           ;Config register CONFIG @ 0x2007
  2143                           ;	Oscillator Selection bits
  2144                           ;	FOSC = XT, XT oscillator
  2145                           ;	Watchdog Timer
  2146                           ;	WDTE = OFF, WDT disabled
  2147                           ;	Power-up Timer Enable bit
  2148                           ;	PWRTE = OFF, Power-up Timer is disabled
  2149                           ;	Code Protection bit
  2150                           ;	CP = OFF, Code protection disabled
  2151     2007                     	org	8199
  2152     2007  3FF9               	dw	16377

Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     40      64

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(1) Largest target is 4
		 -> asciiValue(BANK0[4]), 

    LCD_print@string	PTR const unsigned char  size(1) Largest target is 17
		 -> main@displayString(BANK0[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_atoi
    _atoi->___wmul
    _LCD_setCursor->_LCD_command
    _LCD_print->_LCD_data
    _LCD_init->_LCD_command
    _LCD_clear->_LCD_command

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0    2113
                                             14 BANK0     26    26      0
                      _Keyboard_init
                          _LCD_clear
                           _LCD_init
                          _LCD_print
                      _LCD_setCursor
                _Prepare_Keypad_Pins
                   _Prepare_LCD_Pins
                        _Read_Keypad
                               _atoi
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     505
                                              6 BANK0      8     6      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     244
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _Read_Keypad                                          6     6      0     202
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _Prepare_LCD_Pins                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Prepare_Keypad_Pins                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_setCursor                                        5     4      1     266
                                              3 BANK0      5     4      1
                        _LCD_command
 ---------------------------------------------------------------------------------
 (1) _LCD_print                                            1     1      0     100
                                              3 BANK0      1     1      0
                           _LCD_data
 ---------------------------------------------------------------------------------
 (2) _LCD_data                                             3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      22
                                              3 BANK0      2     2      0
                        _LCD_command
 ---------------------------------------------------------------------------------
 (1) _LCD_clear                                            2     2      0      22
                                              3 BANK0      2     2      0
                        _LCD_command
 ---------------------------------------------------------------------------------
 (2) _LCD_command                                          3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Keyboard_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Keyboard_init
   _LCD_clear
     _LCD_command
   _LCD_init
     _LCD_command
   _LCD_print
     _LCD_data
   _LCD_setCursor
     _LCD_command
   _Prepare_Keypad_Pins
   _Prepare_LCD_Pins
   _Read_Keypad
   _atoi
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42     28      40       3       97.0%
ABS                  0      0      40       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0      40       6        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Fri Apr 26 19:30:08 2024

       ?_Prepare_Keypad_Pins 000C                            pc 0002                           l93 0113  
                         l96 0126                           l99 01A1                           fsr 0004  
        ___wmul@multiplicand 000E                          l102 0100                          l115 013B  
                        l108 014C                          l132 00DB                          l109 0154  
                        l221 0162                          l118 00F3                          l135 00E2  
                        l223 017A                          l128 0263                          l129 02A2  
                        l693 0215                          l981 0103                          l983 0105  
                        l991 0118                          l985 0107                          l993 011A  
                        l987 0111                          l995 0124                          l989 0116  
                        l997 0155                          l999 0158                          _RA0 0028  
                        _RA1 0029                          _RA2 002A                          u600 0296  
                        u520 0176                          u601 0295                          u521 0175  
                        u505 0163                          u530 0226                          u610 01B5  
                        u531 0225                          u515 016A                          u611 01B4  
                        u620 01C0                          u700 02B9                          u605 0292  
                        u621 01BF                          u701 02B8                          u630 01C8  
                        u710 02BF                          u535 0222                          u631 01C7  
                        u711 02BE                          u560 0254                          u544 022E  
                        u640 01D7                          u800 0330                          u720 02D3  
                        u561 0253                          u545 022C                          u641 01D6  
                        u801 032F                          u721 02D2                          u554 024B  
                        u490 015C                          u650 0200                          u810 0345  
                        u730 02E1                          u555 0249                          u491 015B  
                        u651 01FF                          u811 0344                          u731 02E0  
                        u580 0263                          u660 0205                          u900 039A  
                        u820 0350                          u740 02E8                          u581 0262  
                        u661 0204                          u901 0399                          u821 034F  
                        u741 02E7                          u725 02CF                          u670 0143  
                        u574 025A                          u910 03A3                          u830 0355  
                        u750 02FF                          u671 0142                          u575 0258  
                        u911 03A2                          u831 0354                          u751 02FE  
                        u735 02DD                          u680 013B                          u920 03A9  
                        u840 035E                          u760 030B                          u681 013A  
                        u921 03A8                          u841 035D                          u761 030A  
                        u930 03AF                          u850 0364                          u770 0315  
                        u690 02A9                          u595 0276                          u931 03AE  
                        u851 0363                          u771 0314                          u940 03C6  
                        u860 036F                          u780 0324                          u941 03C5  
                        u861 036E                          u781 0323                          u950 03D2  
                        u870 0388                          u790 032A                          u951 03D1  
                        u871 0387                          u791 0329                          u960 03DC  
                        u880 038D                          u961 03DB                          u881 038C  
                        u890 0395                          u891 0394                          u977 03F2  
                        u987 023C                          u997 0268                          fsr0 0004  
                        indf 0000                         l1001 015C                         l1011 017B  
                       l1003 0169                         l1021 0195                         l1013 017E  
                       l1005 0170                         l1101 01F5                         l1031 00F0  
                       l1023 0197                         l1015 0188                         l1111 00D9  
                       l1007 0176                         l1103 0200                         l1025 00EB  
                       l1113 00F4                         l1017 018A                         l1121 0148  
                       l1033 00DC                         l1041 0227                         l1105 0205  
                       l1201 0350                         l1027 00ED                         l1115 00F6  
                       l1019 0193                         l1131 012E                         l1123 014E  
                       l1043 0234                         l1035 0216                         l1107 0211  
                       l1211 0369                         l1203 0355                         l1029 00EE  
                       l1133 0133                         l1125 0152                         l1117 013E  
                       l1061 026D                         l1053 0244                         l1045 0237  
                       l1037 0219                         l1221 0388                         l1213 036F  
                       l1205 0358                         l1141 02B0                         l1127 0129  
                       l1119 0143                         l1071 0296                         l1063 0272  
                       l1047 0241                         l1223 038D                         l1215 0372  
                       l1231 039E                         l1207 035E                         l1151 02C6  
                       l1143 02B1                         l1135 02A3                         l1129 012A  
                       l1057 0254                         l1081 01A8                         l1241 03BE  
                       l1233 03A3                         l1225 038F                         l1217 037E  
                       l1209 0364                         l1161 02F7                         l1153 02D3  
                       l1145 02B4                         l1137 02A5                         l1059 0264  
                       l1067 0283                         l1075 02A1                         l1091 01CA  
                       l1083 01AC                         l1251 03D6                         l1243 03C0  
                       l1235 03A9                         l1227 0395                         l1219 0382  
                       l1171 030F                         l1163 02F9                         l1155 02E1  
                       l1147 02B9                         l1139 02AE                         l1069 0289  
                       l1093 01CF                         l1085 01B5                         l1261 03E6  
                       l1253 03DC                         l1245 03C6                         l1237 03AF  
                       l1229 039A                         l1173 0315                         l1165 02FF  
                       l1157 02E8                         l1149 02BF                         l1181 031E  
                       l1087 01C0                         l1079 01A4                         l1263 03E8  
                       l1247 03CC                         l1239 03B2                         l1191 033A  
                       l1183 0324                         l1255 03E0                         l1167 0305  
                       l1159 02EB                         l1175 0319                         l1097 01D8  
                       l1089 01C8                         l1265 03ED                         l1257 03E1  
                       l1249 03D2                         l1185 032A                         l1177 031B  
                       l1169 030B                         l1193 033F                         l1259 03E2  
                       l1195 0345                         l1187 0330                         l1179 031C  
                       l1197 0347                         l1189 0336                         l1199 034A  
               ?_LCD_command 000C                         u1007 011F                         u1017 0183  
                       u1027 018F                         u1037 019C                         u1047 00FB  
                       u1057 010C                         _atoi 01A2                         _main 02A3  
                       btemp 004E                         start 0000        ??_Prepare_Keypad_Pins 0000  
              ??_Read_Keypad 000C             __end_of_LCD_data 0127             __end_of_LCD_init 01A2  
                      ?_atoi 0012                        ?_main 000C                        _PORTB 0006  
                      _TRISA 0085                        _TRISB 0086                        atoi@n 0017  
                      atoi@s 0019                        main@i 002F                        pclath 000A  
                      status 0003                        wtemp0 004E              __initialization 03F9  
              main@charCount 0033                 __end_of_atoi 0216                 __end_of_main 03F9  
              _Keyboard_init 00EB                main@asciiCode 002D                       ??_atoi 0014  
                     ??_main 001A                _LCD_setCursor 013C          __end_of_Read_Keypad 02A3  
          __end_of_LCD_clear 0101            __end_of_LCD_print 013C             _Prepare_LCD_Pins 00D9  
             ?_Keyboard_init 000C                       ___wmul 0155                 LCD_data@data 000E  
                     _teclas 0007               ?_LCD_setCursor 000F      __end_of__initialization 03FE  
                  ?_LCD_data 000C                    ?_LCD_init 000C               __pcstackCOMMON 0000  
                _Read_Keypad 0216                   __pbssBANK0 0034                   ??_LCD_data 000C  
                 ??_LCD_init 000F              ??_Keyboard_init 0000                   __pmaintext 02A3  
                    ?___wmul 000C                   _asciiValue 0048              ??_LCD_setCursor 0000  
                 __stringtab 0001  __end_of_Prepare_Keypad_Pins 00E3     __end_of_Prepare_LCD_Pins 00DC  
                    __ptext1 01A2                      __ptext2 0155                      __ptext3 0216  
                    __ptext4 00D9                      __ptext5 00DC                      __ptext6 013C  
                    __ptext7 0127                      __ptext8 0114                      __ptext9 017B  
                    atoi@neg 0016                      main@key 0032                      clrloop0 00E4  
                  _LCD_clear 00F4         end_of_initialization 03FE            _LCD_setCursor$134 0011  
                  _LCD_print 0127              LCD_print@string 000F                    _PORTAbits 0005  
                  _TRISAbits 0085                   ?_LCD_clear 000C                   ?_LCD_print 000C  
               ?_Read_Keypad 000C               __end_of___wmul 017B               __end_of_teclas 0017  
        start_initialization 03F9                ??_LCD_command 000C                     ??___wmul 0000  
           LCD_setCursor@row 0010                    ___latbits 0000                __pcstackBANK0 000C  
                ??_LCD_clear 000F                  ??_LCD_print 0000          __end_of_LCD_command 0114  
                  _asciiMode 0046        __end_of_Keyboard_init 00F4                  _asciiDigits 0045  
      __end_of_LCD_setCursor 0155            ?_Prepare_LCD_Pins 000C                    __pstrings 0001  
         ??_Prepare_LCD_Pins 0000               _cursorPosition 0047            main@displayString 001C  
             ___wmul@product 0010                     _LCD_data 0114                     _LCD_init 017B  
                  clear_ram0 00E3                  __stringbase 0006                    main@i_121 0030  
                  main@i_122 0031            ___wmul@multiplier 000C        LCD_setCursor@position 0013  
                _LCD_command 0101           __end_of__stringtab 0007                     __ptext10 00F4  
                   __ptext11 0101                     __ptext12 00EB                     main@F719 0034  
         LCD_command@command 000E                    stringcode 0001          LCD_setCursor@column 000F  
                   stringdir 0001                     stringtab 0001          _Prepare_Keypad_Pins 00DC  
             Read_Keypad@col 0010               Read_Keypad@row 000E  
